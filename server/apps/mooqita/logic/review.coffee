###############################################
@request_review = (solution, user) ->
	requested = num_requested_reviews solution
	provided = num_provided_reviews solution
	credits = provided - requested

	if not Roles.userIsInRole user, "challenge_designer"
		if credits < 0
			throw new Meteor.Error "User needs more credits to request reviews."

	#WordPOS = require("wordpos")
	#wordpos = new WordPOS()
	#text_index = wordpos.parse challenge.content

	rr =
		challenge_id: solution.challenge_id
		solution_id: solution._id
		review_id: ""
		review_done: false
		feedback_id: ""
		feedback_done: false
		provider_id: ""
		requester_id: user._id
		under_review_since: new Date((new Date())-1000*60*60*25)
#		text_index: text_index.join().toLowerCase()

	rr_id = ReviewRequests.insert rr
	msg = "Solution (" + solution.id + ") review requested by: " + get_user_mail user
	log_event msg, event_logic, event_info

	return rr_id


###############################################
@gen_review = (challenge, solution, user) ->
	if solution
		filter =
			solution_id: solution._id
			review_done: false
		review_request = ReviewRequests.findOne filter
	else if challenge
		review_request = find_solution_to_review user, challenge
	else
		review_request = find_solution_to_review user

	if review_request.review_id
		review = Reviews.findOne review_request.review_id
		send_review_timeout_message review
		Reviews.remove review_request.review_id

	if review_request.feedback_id
		Feedback.remove review_request.feedback_id

	review_id = Random.id()
	solution = Solutions.findOne review_request.solution_id
	challenge = Challenges.findOne review_request.challenge_id

	review =
		_id: review_id
		index: 1
		owner_id: user._id
		parent_id: solution._id
		solution_id: solution._id
		challenge_id: challenge._id
		requester_id: solution.owner_id
		view_order: 1
		group_name: ""
		visible_to: "owner"
		template_id: "review"

	feedback =
		index: 1
		owner_id: solution.owner_id
		parent_id: review_id
		review_id: review_id
		solution_id: solution._id
		challenge_id: challenge._id
		requester_id: user._id
		view_order: 1
		group_name: ""
		visible_to: "owner"
		template_id: "feedback"

	r_id = store_document Reviews, review
	f_id = store_document Feedback, feedback

	modify_field_unprotected ReviewRequests,
		review_request._id, "under_review_since", new Date()

	modify_field_unprotected ReviewRequests,
		review_request._id, "provider_id", user._id

	modify_field_unprotected ReviewRequests,
		review_request._id, "review_id", r_id

	modify_field_unprotected ReviewRequests,
		review_request._id, "feedback_id", f_id

	res =
		review_id: r_id
		solution_id: solution._id
		challenge_id: challenge._id

	msg = "Review (" + r_id + ") review generated by: " + get_user_mail user
	log_event msg, event_logic, event_info

	return res


###############################################
@finish_review = (review, user) ->
	if not review.rating
		throw new Meteor.Error "Review: " + review._id + " Does not have a rating."

	if review.published
		throw new Meteor.Error "Review: " + review._id + " is already published"

	filter =
		review_id: review._id
	rr = ReviewRequests.findOne filter

	modify_field_unprotected Reviews, review._id, "published", true
	modify_field_unprotected ReviewRequests, rr._id, "review_done", true
	modify_field_unprotected ReviewRequests, rr._id, "review_finished", new Date()

	send_review_message review

	# Find the solution the review provider submitted.
	# The solution has to be submitted to the same challenge
	# as the solution in the review.
	filter =
		requester_id: review.owner_id
		challenge_id: review.challenge_id

	request = ReviewRequests.findOne filter
	if not request
		if Roles.userIsInRole review.owner_id, "tutor"
			return review._id

		throw new Meteor.Error "A non tutor provided a review without a solution."

	solution = Solutions.findOne request.solution_id
	challenge = Challenges.findOne review.challenge_id

	provided = num_provided_reviews solution
	required = 	challenge.num_reviews

	r_owner = Meteor.users.findOne review.owner_id

	if solution.published
		if Roles.userIsInRole solution.owner_id, "challenge_designer"
			request_review solution, r_owner
		else if required > provided
			request_review solution, r_owner

	msg = "Review (" + review._id + ") review finished by: " + get_user_mail user
	log_event msg, event_logic, event_info

	return review._id


###############################################
@reopen_review = (solution, user) ->
	throw new Meteor.Error "Reopening reviews is not yet supported."

