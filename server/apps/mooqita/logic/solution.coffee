###############################################
@gen_solution = (challenge, user) ->
	solution =
		name: "Solution: " + challenge.title
		index: 1
		owner_id: user._id
		parent_id: challenge._id
		view_order: 1
		group_name: ""
		template_id: "solution"
		challenge_id: challenge._id
		published: false

	res = store_document Solutions, solution
	msg = "Solution (" + res + ") generated by: " + get_user_mail user
	log_event msg, event_logic, event_info

	return res


###############################################
@finish_solution = (solution, user) ->
	if solution.published
		throw new Meteor.Error "Solution: " + solution._id + " is already published"

	requested = num_requested_reviews solution
	provided = num_provided_reviews solution
	credits = provided - requested

	if credits < 0
		msg = "You need to finish your pending reviews."
		msg += "To publish a new solution."
		msg += "Go to My Challenges and finish open challenges."
		throw new Meteor.Error "no-credits", msg

	modify_field_unprotected Solutions, solution._id, "published", true
	solution = Solutions.findOne solution._id

	#TODO: inform people on the waiting list for reviews.

	request_review solution, user

	msg = "Solution (" + solution.id + ") published by: " + get_user_mail user
	log_event msg, event_logic, event_info

	return solution._id


###############################################
@reopen_solution = (solution, user) ->
	filter =
		solution_id: solution._id

	requests = ReviewRequests.find(filter).fetch()

	for r in requests
		if r.review_id
			throw new Meteor.Error "in-progress", "The Solution already has reviews."

	n = ReviewRequests.remove filter

	mod =
		$set:
			published: false
	Solutions.update solution._id, mod

	msg = "Solution (" + solution.id + ") reopened by: " + get_user_mail user
	log_event msg, event_logic, event_info

	return n


###############################################
@find_solution_to_review = (user, challenge=null) ->
	#solution must have unsatisfied review requests
	#solution owner must have enough credit to receive/request reviews
	#solution must be in the realm of the student
	#solution must be visible to others
	#solution is not owned by the reviewer

#	corpus = collect_keywords user._id

#	WordPOS = require("wordpos")
#	wordpos = new WordPOS()
#	text_index = wordpos.parse corpus

	filter =
		under_review_since:
			$lt: new Date((new Date())-1000*60*60*24)
		review_done: false
		requester_id:
			$ne: user._id
#		$text:
#			$search: text_index.join().toLowerCase()

	mod =
		sort:
			under_review_since: 1

	if challenge
		filter.challenge_id = challenge._id

	rr = ReviewRequests.findOne filter, mod

	if not rr
		throw new Meteor.Error "no-solution", "There are no solutions to review at the moment."

	if not challenge
		challenge = Challenges.findOne rr.challenge_id

		if not challenge
			throw new Meteor.Error "no-challenge", "challenge not found"

	solution = Solutions.findOne rr.solution_id
	if not solution
		throw new Meteor.Error "no-solution","solution not found"

	return rr

